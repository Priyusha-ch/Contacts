"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridEditCell = void 0;
var React = require("react");
var utils_1 = require("./../utils");
var kendo_react_inputs_1 = require("@progress/kendo-react-inputs");
var kendo_react_dateinputs_1 = require("@progress/kendo-react-dateinputs");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var constants_1 = require("../constants");
/**
 * @hidden
 */
var GridEditCell = function (props) {
    var _a, _b, _c, _d, _e;
    var data = (0, utils_1.getNestedValue)(props.field, props.dataItem);
    var defaultRendering = null;
    var editCellClasses = (0, kendo_react_common_1.classNames)('k-table-td', 'k-grid-edit-cell', (_a = {},
        _a['k-selected'] = props.isSelected,
        _a), props.className);
    var inputId = React.useMemo(function () { return (0, kendo_react_common_1.guid)(); }, []);
    var navigationAttributes = (0, kendo_react_data_tools_1.useTableKeyboardNavigation)(props.id);
    var tdProps = null;
    var content = null;
    var handleOnChange = React.useCallback(function (syntheticEvent) {
        if (props.onChange) {
            var value = syntheticEvent.target.type === 'checkbox' ?
                syntheticEvent.target.checked :
                syntheticEvent.target.value;
            props.onChange({
                dataItem: props.dataItem,
                dataIndex: props.dataIndex,
                field: props.field,
                syntheticEvent: syntheticEvent,
                value: value
            });
        }
    }, [props.onChange, props.dataItem, props.dataIndex, props.field]);
    var onContextMenu = React.useCallback(function (event) {
        if (props.onContextMenu) {
            props.onContextMenu.call(undefined, event, props.dataItem, props.field);
        }
    }, [props.onContextMenu, props.dataItem, props.field]);
    var inputChange = React.useCallback(function (e) {
        if (props.onChange) {
            props.onChange({
                dataItem: props.dataItem,
                dataIndex: props.dataIndex,
                field: props.field,
                syntheticEvent: e.syntheticEvent,
                value: e.value
            });
        }
    }, [props.onChange, props.dataItem, props.dataIndex, props.field]);
    switch (props.editor) {
        case 'numeric':
            tdProps = __assign((_b = { onContextMenu: onContextMenu, colSpan: props.colSpan, style: props.style, className: editCellClasses }, _b['aria-colindex'] = props.ariaColumnIndex, _b['aria-selected'] = props.isSelected, _b[constants_1.GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _b.role = 'gridcell', _b), navigationAttributes);
            content = (React.createElement(kendo_react_inputs_1.NumericTextBox, { width: "100%", value: (data === undefined) ? null : data, onChange: inputChange }));
            defaultRendering = (React.createElement("td", __assign({}, tdProps), content));
            break;
        case 'date':
            tdProps = __assign((_c = { onContextMenu: onContextMenu, colSpan: props.colSpan, style: props.style, className: editCellClasses }, _c['aria-colindex'] = props.ariaColumnIndex, _c['aria-selected'] = props.isSelected, _c[constants_1.GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _c.role = 'gridcell', _c), navigationAttributes);
            content = (React.createElement(kendo_react_dateinputs_1.DatePicker, { width: "100%", value: data, onChange: inputChange }));
            defaultRendering = (React.createElement("td", __assign({}, tdProps), content));
            break;
        case 'boolean':
            tdProps = __assign((_d = { onContextMenu: onContextMenu, colSpan: props.colSpan, style: props.style, className: editCellClasses }, _d['aria-colindex'] = props.ariaColumnIndex, _d['aria-selected'] = props.isSelected, _d[constants_1.GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _d.role = 'gridcell', _d), navigationAttributes);
            content = ([
                React.createElement("input", { checked: data || false, id: inputId, type: "checkbox", className: "k-checkbox k-checkbox-md k-rounded-md", onChange: handleOnChange, key: 1 }),
                React.createElement("label", { className: "k-checkbox-label", htmlFor: inputId, key: 2 })
            ]);
            defaultRendering = (React.createElement("td", __assign({}, tdProps), content));
            break;
        default:
            tdProps = __assign((_e = { onContextMenu: onContextMenu, colSpan: props.colSpan, style: props.style, className: editCellClasses }, _e['aria-colindex'] = props.ariaColumnIndex, _e['aria-selected'] = props.isSelected, _e[constants_1.GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _e.role = 'gridcell', _e), navigationAttributes);
            content = (React.createElement("input", { style: { width: '100%' }, className: "k-input", value: data || '', onChange: handleOnChange }));
            defaultRendering = (React.createElement("td", __assign({}, tdProps), content));
    }
    var editorSetting = props.editor || 'text';
    var customCells = props.cells;
    if (customCells && customCells.edit && customCells.edit[editorSetting]) {
        var CustomCell = customCells.edit[editorSetting];
        return (React.createElement(CustomCell, __assign({}, props, { tdProps: tdProps }), content));
    }
    return props.render ?
        props.render.call(undefined, defaultRendering, props) :
        defaultRendering;
};
exports.GridEditCell = GridEditCell;
