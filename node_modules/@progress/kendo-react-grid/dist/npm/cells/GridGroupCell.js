"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridGroupCell = void 0;
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
var React = require("react");
var messages_1 = require("../messages");
/**
 * @hidden
 */
var GridGroupCell = function (props) {
    var defaultRendering = null;
    var columnIndex = props.columnIndex, level = props.level, columnsCount = props.columnsCount, rowType = props.rowType, dataItem = props.dataItem, field = props.field, onChange = props.onChange, expanded = props.expanded, render = props.render, dataIndex = props.dataIndex, ariaColumnIndex = props.ariaColumnIndex, isRtl = props.isRtl;
    var definedField = field || '';
    var navigationAttributes = (0, kendo_react_data_tools_1.useTableKeyboardNavigation)(props.id);
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var tdProps = null;
    var td2Props = null;
    var content = null;
    var onKeyDownHandler = React.useCallback(function (event) {
        if (event.isDefaultPrevented()) {
            return;
        }
        if (event.keyCode === kendo_react_common_1.Keys.enter && onChange) {
            event.preventDefault();
            onChange({
                dataItem: dataItem,
                dataIndex: dataIndex,
                syntheticEvent: event,
                field: undefined,
                value: !expanded
            });
        }
    }, [expanded, onChange, dataItem, dataIndex]);
    var onContextMenu = React.useCallback(function (event) {
        if (props.onContextMenu) {
            props.onContextMenu.call(undefined, event, props.dataItem, props.field);
        }
    }, [props.onContextMenu, props.dataItem, props.field]);
    var renderCellCollapse = function (colspan, styles) {
        var _a;
        var baseMessage = expanded ? messages_1.groupCollapse : messages_1.groupExpand;
        var message = localization.toLanguageString(baseMessage, messages_1.messages[baseMessage]);
        tdProps = __assign((_a = { className: 'k-table-td', style: __assign(__assign({}, props.style), styles), colSpan: colspan, key: 'g-colspan', role: 'gridcell' }, _a['aria-selected'] = false, _a['aria-expanded'] = expanded, _a['aria-colindex'] = ariaColumnIndex, _a.onKeyDown = onKeyDownHandler, _a.onContextMenu = onContextMenu, _a), navigationAttributes);
        content = (React.createElement("p", { className: "k-reset" },
            React.createElement("a", { onClick: function (e) {
                    e.preventDefault();
                    if (onChange) {
                        onChange({
                            dataItem: dataItem,
                            dataIndex: dataIndex,
                            syntheticEvent: e,
                            field: undefined,
                            value: !expanded
                        });
                    }
                }, href: "#", tabIndex: -1, "aria-label": message },
                React.createElement(kendo_react_common_1.IconWrap, { name: expanded ?
                        'caret-alt-down'
                        : isRtl ? 'caret-alt-left' : 'caret-alt-right', icon: expanded ?
                        kendo_svg_icons_1.caretAltDownIcon
                        : isRtl ? kendo_svg_icons_1.caretAltLeftIcon : kendo_svg_icons_1.caretAltRightIcon })),
            ((dataItem[definedField] instanceof Date) && dataItem[definedField].toString) ?
                dataItem[definedField].toString() :
                dataItem[definedField]));
        return (React.createElement("td", __assign({}, tdProps), content));
    };
    if (columnIndex === undefined || level === undefined || columnIndex < level ||
        columnsCount === undefined || rowType !== 'groupHeader' || dataItem[definedField] === undefined) {
        tdProps = {
            style: props.style,
            key: 'g' + columnIndex,
            className: (0, kendo_react_common_1.classNames)('k-table-td', 'k-group-cell', { 'k-grid-content-sticky': props.locked }),
            role: 'gridcell',
            onContextMenu: onContextMenu
        };
        defaultRendering = (React.createElement("td", __assign({}, tdProps)));
    }
    else if (columnIndex <= level && !props.locked) {
        defaultRendering = renderCellCollapse(columnsCount - columnIndex, {});
    }
    else if (columnIndex <= level && props.locked) {
        td2Props = {
            className: 'k-table-td',
            role: 'gridcell',
            colSpan: (columnsCount - columnIndex),
            style: { borderLeftWidth: 0, borderRightWidth: 0 },
            onContextMenu: onContextMenu
        };
        defaultRendering = (React.createElement(React.Fragment, null,
            renderCellCollapse(0, { position: 'sticky', zIndex: 2 }),
            React.createElement("td", __assign({}, td2Props))));
    }
    var rowTypeSetting = props.rowType || 'data';
    var customCells = props.cells;
    if (customCells && customCells.group
        && customCells.group[rowTypeSetting]) {
        var CustomCell = customCells.group[rowTypeSetting];
        return (React.createElement(CustomCell, __assign({}, props, { tdProps: tdProps, td2Props: td2Props }), content));
    }
    return render ?
        render.call(undefined, defaultRendering, props) :
        defaultRendering;
};
exports.GridGroupCell = GridGroupCell;
