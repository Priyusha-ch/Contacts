"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GridCell = void 0;
var React = require("react");
var utils_1 = require("./../utils");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var kendo_react_data_tools_1 = require("@progress/kendo-react-data-tools");
var constants_1 = require("../constants");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var GridCell = function (props) {
    var _a;
    var defaultRendering = null;
    var intl = (0, kendo_react_intl_1.useInternationalization)();
    var navigationAttributes = (0, kendo_react_data_tools_1.useTableKeyboardNavigation)(props.id);
    var onContextMenu = React.useCallback(function (event) {
        if (props.onContextMenu) {
            props.onContextMenu.call(undefined, event, props.dataItem, props.field);
        }
    }, [props.onContextMenu, props.dataItem, props.field]);
    var tdProps = null;
    var content = null;
    if (props.rowType === 'groupFooter') {
        tdProps = {
            onContextMenu: onContextMenu,
            className: props.className
        };
        defaultRendering = React.createElement("td", __assign({}, tdProps));
    }
    else if (props.field !== undefined && props.rowType !== 'groupHeader') {
        var data = (0, utils_1.getNestedValue)(props.field, props.dataItem);
        if (data !== undefined && data !== null) {
            content = props.format ?
                intl.format(props.format, data) :
                data.toString();
        }
        var className = (0, kendo_react_common_1.classNames)('k-table-td', props.className, { 'k-selected': props.isSelected });
        tdProps = __assign((_a = { onContextMenu: onContextMenu, colSpan: props.colSpan, style: props.style, className: className, role: 'gridcell', 'aria-colindex': props.ariaColumnIndex, 'aria-selected': props.isSelected }, _a[constants_1.GRID_COL_INDEX_ATTRIBUTE] = props.columnIndex, _a), navigationAttributes);
        defaultRendering = (React.createElement("td", __assign({}, tdProps), content));
    }
    var rowTypeSetting = props.rowType || 'data';
    var customCells = props.cells;
    if (customCells && customCells[rowTypeSetting]) {
        var CustomCell = customCells[rowTypeSetting];
        return (React.createElement(CustomCell, __assign({}, props, { tdProps: tdProps }), content));
    }
    return props.render ?
        props.render.call(undefined, defaultRendering, props) :
        defaultRendering;
};
exports.GridCell = GridCell;
