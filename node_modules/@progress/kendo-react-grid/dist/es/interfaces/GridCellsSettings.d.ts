import { ComponentType } from 'react';
import { TABLE_COL_INDEX_ATTRIBUTE } from '@progress/kendo-react-data-tools';
import { GridCellProps } from './GridCellProps';
import { GridFooterCellProps } from './GridFooterCellProps';
import { GridFilterCellProps } from './GridFilterCellProps';
import { GridHeaderCellProps } from './GridHeaderCellProps';
export interface GridTdAttributes extends React.TdHTMLAttributes<HTMLTableCellElement> {
    [TABLE_COL_INDEX_ATTRIBUTE]?: number;
    key?: string;
}
export interface GridThAttributes extends React.ThHTMLAttributes<HTMLTableCellElement> {
    columnId: string;
    key?: string;
}
/**
 * The properties of the default Grid Cell.
 */
export interface GridCustomCellProps extends GridCellProps {
    /**
     * The props and attributes that are applied to the td element by default.
     */
    tdProps?: React.TdHTMLAttributes<HTMLTableCellElement> | null;
    /**
     * The props and attributes that are applied to the second td. Such element is
     * rendered in very rare cases when we have grouping and sticky columns.
     */
    td2Props?: React.TdHTMLAttributes<HTMLTableCellElement> | null;
    /**
     * The default children of the table cell.
     */
    children?: React.ReactNode | React.ReactNode[];
}
/**
 * The properties of the footer Grid Cell.
 */
export interface GridCustomFooterCellProps extends GridFooterCellProps {
    /**
     * The props and attributes that are applied to the td element by default.
     */
    tdProps?: React.TdHTMLAttributes<HTMLTableCellElement> | null;
    /**
     * The index of the column that is rendered.
     */
    index?: number;
}
/**
 * The properties of the filter Grid Cell.
 */
export interface GridCustomFilterCellProps extends GridFilterCellProps {
    /**
     * The props and attributes that are applied to the td element by default.
     */
    thProps?: GridThAttributes | null;
    /**
     * The default children of the table cell.
     */
    children?: React.ReactNode | React.ReactNode[];
    /**
     * The index of the column.
     */
    index?: number;
}
/**
 * The properties of the header Grid Cell.
 */
export interface GridCustomHeaderCellProps extends GridHeaderCellProps {
    /**
     * The props and attributes that are applied to the td element by default.
     */
    thProps?: GridThAttributes | null;
    /**
     * The default children of the table cell.
     */
    children: React.ReactNode | React.ReactNode[];
    /**
     * The index of the column.
     */
    index?: number;
}
/**
 * The settings of the cells prop options.
 */
export interface GridCellsSettings {
    headerCell?: ComponentType<GridCustomHeaderCellProps>;
    filterCell?: ComponentType<GridCustomFilterCellProps>;
    footerCell?: ComponentType<GridCustomFooterCellProps>;
    groupHeader?: ComponentType<GridCustomCellProps>;
    data?: ComponentType<GridCustomCellProps>;
    groupFooter?: ComponentType<GridCustomCellProps>;
    select?: {
        groupHeader?: ComponentType<GridCustomCellProps>;
        data?: ComponentType<GridCustomCellProps>;
        groupFooter?: ComponentType<GridCustomCellProps>;
    };
    hierarchy?: {
        groupHeader?: ComponentType<GridCustomCellProps>;
        data?: ComponentType<GridCustomCellProps>;
        groupFooter?: ComponentType<GridCustomCellProps>;
    };
    group?: {
        groupHeader?: ComponentType<GridCustomCellProps>;
        data?: ComponentType<GridCustomCellProps>;
        groupFooter?: ComponentType<GridCustomCellProps>;
    };
    edit?: {
        text?: ComponentType<GridCustomCellProps>;
        numeric?: ComponentType<GridCustomCellProps>;
        boolean?: ComponentType<GridCustomCellProps>;
        date?: ComponentType<GridCustomCellProps>;
    };
}
